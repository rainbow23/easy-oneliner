# ワンライナーお手軽実行するためのファイル
#
# {書き方}
#     （例）
#          [これはワンライナーです] oneliner | some-command | other-command
#
#     []のなかにそのワンライナーの説明を書きます（省いても構いません）
#     []の後ろに1つ以上のスペースをあけてワンライナーを書きます
#
# {@マークについて}
#     ワンライナー中に@マークを1つだけ記述することができます
#     実行時にその@マークの位置にカーソルが置かれます
#
# {!マークについて}
#     ワンライナーの行末に!マークを置くと、ワンライナーが即座に実行されます
#
# {#マークについて}
#     2種類の使用方法があります
#     行頭に置かれた場合、その行はfzfに表示されません
#     行中に置いた場合、それ以降をコメントとみなし黒色表示します
#     ただし、後者の場合#マークの前後にスペースを必要とします
#
# {:マークについて}
#     セクションごとのタイトルに最適です
#     シェルが無視してくれる記号には#と:があります
#     #は行頭にあるとfzfが無視しますが、:は問題無いです
#

: 暗号関連
[ファイルの暗号化] openssl aes-256-cbc -e -in normal_file@ -out encrypted_file
[ファイルの復号] openssl aes-256-cbc -d -in encrypted_file@ -out decrypted_file
[ディレクトリを圧縮] tar zcf - some_dir@ | openssl aes-256-cbc -e -out hogehoge.tgz.enc
[ディレクトリから伸張] openssl aes-256-cbc -d -in hogehoge.tgz.enc@ | tar zxvf -

: fzf イディオム
[Unite的な使い方でVimを開く] fzf --prompt="unite.vim> " V ! #即実行
[最近開いたファイルをコピー] cp from to # from,toはグローバルエイリアス
[最近開いたファイルをVimで開く] vim from # fromはグローバルエイリアス
[最近開いたファイルをVimで開く] mru V ! #即実行

: その他
[galiasの重複がないかチェック] cat ${DOTPATH:?not set}/.zsh/30_aliases.zsh G '[A-Z]\+' G 'alias -g' | sed -E '/^ *#.*$/d;s/^.*alias -g ([A-Z0-9]+)=.*$/\1/' S | uniq -c G -v "^ *1" A 2
[tacがなければtail -rを出力] echo "${${${(M)${+commands[tac]}#1}:+tac}:-"tail -r"}"
[git logで使った絵文字を列挙] git log --oneline | grep -o ':\w\+:' | sort -u | if has emojify; then emojify; else cat -; fi
[テキストのコマンドの総行数] for file in $DOTPATH/bin/*; do file $file | grep -i "text" | cut -d: -f1 | xargs wc -l; done | awk '{m+=$1} END{print m}'
[lsとsedによる簡易treeコマンド] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

: gif アニメ
[logoを作成する] mov2gif -f --size 1500x500 --rate 13 ~/logo@.mov
[demo.gifを作成する] mov2gif -f --rate 13 ~/demo@.mov

# vim:ft=sh

[sakuraサーバ] ssh srainbow !
:ssh #################################################################################################################

ls -la | awk '{print $@ }'
:awk #################################################################################################################

[最近開いたファイルをVimで開く Enter] vim $(mru) !
vim ~/.easy-oneliner/easy-oneliner.txt !
: vim #################################################################################################################

source ~/.zshrc !
source ~/.bashrc !
: shell #################################################################################################################

ansible-playbook -i @
: ansible #################################################################################################################

docker image pull @
[Dockerイメージビルド: -tオプション {イメージ名:タグ名} Dockerfile配置パス] docker image build -t @
[Docker HubへPushします] docker image push $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf) !
[Dockerイメージのタグ付け] docker image tag @
: イメージ
[イメージ表示] docker image ls !
[コンテナ表示: 終了したコンテナ] docker container ls  -a !
[コンテナ表示: filter] docker container ls --filter "name=@"
[コンテナ表示: 現在実行中のコンテナ] docker container ls !
: 表示
[コンテナ停止: 現在実行中のコンテナ] docker container stop $(docker container ls  | fzf | awk '{print $1}') !
[コンテナ停止: イメージ名に該当するコンテナ] docker container stop $(docker container ls --filter "ancestor=$(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)" -q) !
: 停止
[コンテナ起動: ポートフォワーディング指定 -pオプションは {ホスト側port}:{コンテナport}] docker container run -d -p @9000:8080 $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)
[コンテナ起動: イメージから選択] docker container run @ $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)
[コンテナ起動] docker container run @
: 起動
[Docker Hub ログイン -uオプションはID -pオプションはパスワード] docker login -u @ -p
: docker #################################################################################################################
git commit -m "@"
git branch -r @
git branch -a @
git rebase -i HEAD@
git log !
git log --oneline !
git log --stat !
git log --graph !
git add -u !
: git #################################################################################################################
