# ワンライナーお手軽実行するためのファイル
#
# {書き方}
#     （例）
#          [これはワンライナーです] oneliner | some-command | other-command
#
#     []のなかにそのワンライナーの説明を書きます（省いても構いません）
#     []の後ろに1つ以上のスペースをあけてワンライナーを書きます
#
# {@マークについて}
#     ワンライナー中に@マークを1つだけ記述することができます
#     実行時にその@マークの位置にカーソルが置かれます
#
# {!マークについて}
#     ワンライナーの行末に!マークを置くと、ワンライナーが即座に実行されます
#
# {#マークについて}
#     2種類の使用方法があります
#     行頭に置かれた場合、その行はfzfに表示されません
#     行中に置いた場合、それ以降をコメントとみなし黒色表示します
#     ただし、後者の場合#マークの前後にスペースを必要とします
#
# {:マークについて}
#     セクションごとのタイトルに最適です
#     シェルが無視してくれる記号には#と:があります
#     #は行頭にあるとfzfが無視しますが、:は問題無いです
#

: 暗号関連
[ファイルの暗号化] openssl aes-256-cbc -e -in normal_file@ -out encrypted_file
[ファイルの復号] openssl aes-256-cbc -d -in encrypted_file@ -out decrypted_file
[ディレクトリを圧縮] tar zcf - some_dir@ | openssl aes-256-cbc -e -out hogehoge.tgz.enc
[ディレクトリから伸張] openssl aes-256-cbc -d -in hogehoge.tgz.enc@ | tar zxvf -

: fzf イディオム
[Unite的な使い方でVimを開く] fzf --prompt="unite.vim> " V ! #即実行
[最近開いたファイルをコピー] cp from to # from,toはグローバルエイリアス
[最近開いたファイルをVimで開く] vim from # fromはグローバルエイリアス
[最近開いたファイルをVimで開く] mru V ! #即実行

: その他
[galiasの重複がないかチェック] cat ${DOTPATH:?not set}/.zsh/30_aliases.zsh G '[A-Z]\+' G 'alias -g' | sed -E '/^ *#.*$/d;s/^.*alias -g ([A-Z0-9]+)=.*$/\1/' S | uniq -c G -v "^ *1" A 2
[tacがなければtail -rを出力] echo "${${${(M)${+commands[tac]}#1}:+tac}:-"tail -r"}"
[git logで使った絵文字を列挙] git log --oneline | grep -o ':\w\+:' | sort -u | if has emojify; then emojify; else cat -; fi
[テキストのコマンドの総行数] for file in $DOTPATH/bin/*; do file $file | grep -i "text" | cut -d: -f1 | xargs wc -l; done | awk '{m+=$1} END{print m}'
[lsとsedによる簡易treeコマンド] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

: gif アニメ
[logoを作成する] mov2gif -f --size 1500x500 --rate 13 ~/logo@.mov
[demo.gifを作成する] mov2gif -f --rate 13 ~/demo@.mov

[プロセスの親子関係] ps afx !
[shell再起動] exec $SHELL -l !

# vim:ft=sh
[vagrant] vagrant destroy !
[vagrant] vagrant up !
:vagrant  #################################################################################################################

[sshkey作成 ssh-keygen -t rsa -b 4096 -C "your_email@example.com"] ssh-keygen -t rsa -b 4096 -C @
[ssh vagrantサーバ] ssh myvagrant !
[ssh sakuraサーバ] ssh srainbow !
[ssh raspberryサーバ] ssh pirainbow !
:ssh #################################################################################################################


[ファイルを空にする cat /dev/null > sample.txt] cat /dev/null > @
[awk] ls -la | awk '{print $@ }'
:awk #################################################################################################################

[vim 最近開いたファイルをVimで開く Enter] vim $(mru) !
[vim] vim --version !
[vim] vim ~/dotfiles/_vimrc !
[vim] vim ~/.easy-oneliner/easy-oneliner.txt !
: vim #################################################################################################################

[shell] source ~/.zshrc !
[shell] source ~/.bashrc !
: shell #################################################################################################################

[ansible]  ansible-playbook -i @
: ansible #################################################################################################################

[docker Hub ログイン -uオプションはID -pオプションはパスワード] docker login -u @ -p
: ログイン

[docker image情報] docker inspect $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf) 
docker image pull @
[docker イメージビルド: -tオプション {イメージ名:タグ名} Dockerfile配置パス] docker image build -t @ .
[docker HubへPushします] docker image push $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf) !
[docker イメージのタグ付け] docker image tag @
: イメージ

[docker イメージ削除: 不要なイメージ] docker image prune !
[docker コンテナ削除: 停止している全て] docker container ls --filter "status=exited" | sed '1d' | awk '{print $1}' | xargs docker container rm !
[docker コンテナ削除: 停止している全て] docker container prune !
[docker コンテナ削除: 1つ選択] docker container rm $(docker container ls --filter "status=exited" | sed '1d' | fzf --exit-0 --ansi +m | awk '{print $1}') !
: 削除

[docker コンテナ停止: 現在実行中のコンテナ] docker container stop $(docker container ls  | fzf | awk '{print $1}') !
[docker コンテナ停止: イメージ名に該当するコンテナ] docker container stop $(docker container ls --filter "ancestor=$(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)" -q) !
: 停止

[docker コンテナ再起動] docker container restart $(docker container ls -a | sed '1d' | fzf | awk '{print $1}') !
: 再起動

docker container logs $(docker container ls -a | sed '1d' | fzf +m | awk '{print $1}') !
: ログ出力

[docker 実行中コンテナで標準入力操作] docker container exec -it $(docker container ls | sed '1d' | fzf +m | awk '{print $1}') sh !
: 操作

[docker イメージ表示] docker image ls !
[docker コンテナ表示: 終了したコンテナ] docker container ls --filter "status=exited" !
[docker コンテナ表示: filter] docker container ls --filter "name=@"
[docker コンテナ利用状況] docker container stats !
[docker コンテナ表示: 全てのコンテナ] docker container ls  -a !
[docker コンテナ表示: 現在実行中のコンテナ] docker container ls !
: 表示

[docker コンテナ起動: ポートフォワーディング指定 -pオプションは {ホスト側port}:{コンテナport}] docker container run -d -p @9000:8080 $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)
[docker コンテナ起動: イメージから選択] docker container run @ $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)
[docker コンテナ起動: イメージから選択 自動ログイン] docker container run -it @ $(docker image ls | awk '{print $1":"$2}' | sed '1d' | fzf)
[docker コンテナ起動] docker container run @
[docker コンテナ起動で自動ログイン] docker container run -it @
: 起動
[docker compose] docker-compose rm !
[docker compose] docker-compose stop !
[docker compose] docker-compose ps !
[docker compose] docker-compose up @
[docker compose] docker-compose build !
[docker-compose container起動 docker-compose.ymlのservices名を指定  例:docker-compose run dotfiles] docker-compose run @
: docker #################################################################################################################

[tmux 全体を終了] tmux kill-server !
[tmux セッションの一覧表示] tmux ls !
[tmux 名前をつけて新規セッション開始] tmux new -s @
[tmux 一つ選択したセッションを削除] tks !
[tmux セッションを再開 ※-t <対象セッション名>でセッション名の指定も可能] tmux a -t @
[tmux Select session] ts !
[tmux switch to existing one] tm !
[tmux create new session] tm @
: tmux ###################################################################################################################

[githubとアクセス確認] ssh -T git@github.com
[git conflictで使用 ファイル名を指定必要] git checkout --theirs @
[git conflictで使用 ファイル名を指定必要] git checkout --ours @
[git ローカルブランチが特定のリモートブランチを追跡するように設定 追跡させたいローカルブランチにcheckout済み] git branch --set-upstream-to=origin/@
[git remoteに存在せず、localに存在するブランチを削除] git fetch --all --prune !
[git ブランチ削除] git branch --delete @
[git config --global user.email myname@example.com] git config --global user.email @
[git config --global user.name "My Name"] git config --global user.name @
[git setting] git config --list !
[git 設定] git config --global --list !
[git 設定] git config --local --list !
[git branch --move <古いブランチ名> <新しいブランチ名>] git branch --move @
[git リモートリポジトリの変更] git remote set-url origin @
[git リモートリポジトリのURL確認] git remote -v !
[git リモートリポジトリの追加] git remote add origin @
[git 追跡ブランチを指定してプッシュ] git push -u origin @
[git ローカルrefとリモートrefを比較しローカルが最新なら強制push] git push --force-with-lease
[git ローカルをリモートにプッシュする] git push --set-upstream origin @
[git ブランチ作成してチェックアウト] git checkout -b @
[git チェリーピック] git cherry-pick @
[git remote-tracking branches] git branch --remotes !
[git remote-tracking branches and local branches] git branch --all !
[git 直前のコミット内容を修正する] git commit --amend !
[git リベースを対話式で実行] git rebase -i HEAD@
[git プッシュ] git push !
[git プル] git pull !
git clone @
git log !
git log --stat !
git log --graph !
git log --oneline !
git reset --hard !
git reset --mixed !
git diff --staged !
git add -u !
git commit -m "@"
: git #################################################################################################################

[vim 最近開いたファイルをVimで開く Enter] vim $(mru) !
[vim] vim ~/dotfiles/_vimrc !
[vim] vim ~/.easy-oneliner/easy-oneliner.txt !
[vim] vim --version !
: vim #################################################################################################################
